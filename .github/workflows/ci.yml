name: CI Pipeline

on:
  push:
    branches-ignore:
      - develop
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: "3.10"
  # Logging
  SERVICE_NAME:
  LOG_DIR: logs
  LOG_TO_STDOUT: "true"
  LOG_LEVEL: INFO
  LOG_MAX_DAYS: "3"
  # Container user mapping
  APP_UID: "1000"
  APP_GID: "1000"
  # Docker network
  DOCKER_NETWORK_NAME: rtsp_hub_network
  # Timezone
  TZ: UTC
  # Database
  DATABASE_URL: "sqlite:///./rtsp_hub.db"
  # API
  API_PREFIX: "/api"
  PROJECT_NAME: ""
  API_TOKEN: ""
  # Minio configuration
  MINIO_ENABLED: "false"
  MINIO_ENDPOINT: "minio:9000"
  MINIO_ACCESS_KEY: "YOUR_ACCESS_KEY"
  MINIO_SECRET_KEY: "YOUR_SECRET_KEY"
  MINIO_SECURE: "false"
  MINIO_BUCKET_NAME: "rtsp-hub-videos"
  # Media server configuration
  MEDIA_SERVER_HOST: "media-service"
  MEDIA_SERVER_PORT: "8554"
  RTSP_TRANSPORT: "tcp"
  MEDIA_USERNAME: "admin"
  MEDIA_PASSWORD: "admin123"
  # Recording configuration
  RECORD_ENABLED: "yes"
  RECORD_PATH: "/app/assets/record/%path/%Y-%m-%d_%H-%M-%S"
  RECORD_FORMAT: "fmp4"
  RECORD_PART_DURATION: "1s"
  RECORD_MAX_PART_SIZE: "50M"
  RECORD_SEGMENT_DURATION: "2m"
  RECORD_DELETE_AFTER: "10m"
  # Video processing
  VIDEO_RECORD_PATH: "/app/assets/record"
  VIDEO_PROCESSED_PATH: "/app/assets/processed_videos"
  # Application settings
  RESTART_BACKOFF_SECONDS: "10"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
        pip install black isort

    - name: Check import sorting with isort
      run: |
        isort --profile=black --check-only --diff app/

    - name: Check code formatting with Black
      run: |
        black --check --diff app/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker compose -f docker-compose.test.yml build rtsp-hub

    - name: Create network
      run: |
        docker network create ${{ env.DOCKER_NETWORK_NAME }} || true

    - name: Run tests
      run: |
        docker compose -f docker-compose.test.yml up --exit-code-from rtsp-hub rtsp-hub

    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v
        docker network rm ${{ env.DOCKER_NETWORK_NAME }} || true
